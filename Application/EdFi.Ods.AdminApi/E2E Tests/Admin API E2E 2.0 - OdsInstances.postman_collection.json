{
	"info": {
		"_postman_id": "5687defb-1ab3-4c2b-bc37-9620b0267e81",
		"name": "Admin API E2E 2.0 - OdsInstances",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Landing",
			"item": [
				{
					"name": "Landing Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET Landing: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"GET Landing: Response includes expected properties\", function () {\r",
									"    pm.expect(response).to.have.property(\"version\");\r",
									"    pm.expect(response).to.have.property(\"build\");\r",
									"});\r",
									"\r",
									"const GetSchemaLanding =  {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"version\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"build\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"version\",\r",
									"    \"build\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"GET Landing: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(GetSchemaLanding);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}",
							"host": [
								"{{API_URL}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			}
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Register: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const result = pm.response.json().result;\r",
									"\r",
									"pm.test(\"POST Register: Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register: Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"client\");\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"registered\");\r",
									"});\r",
									"\r",
									"const PostRegisterSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"title\",\r",
									"    \"status\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"POST Register: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(PostRegisterSchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"RegisteredClientId\", pm.variables.replaceIn('{{$guid}}'));\r",
									"pm.collectionVariables.set(\"RegisteredClientSecret\", pm.variables.replaceIn('{{$guid}}'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ClientId",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "ClientSecret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "DisplayName",
									"value": "Postman Test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/register",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Token: Response includes token\", function () {\r",
									"    pm.expect(response).to.have.property(\"access_token\");\r",
									"    pm.expect(response).to.have.property(\"token_type\");\r",
									"    pm.expect(response).to.have.property(\"expires_in\");\r",
									"\r",
									"    pm.expect(response[\"token_type\"]).to.equal(\"Bearer\");\r",
									"});\r",
									"\r",
									"const PostTokenSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"access_token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"token_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"expires_in\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"access_token\",\r",
									"    \"token_type\",\r",
									"    \"expires_in\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"POST Token: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(PostTokenSchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "edfi_admin_api/full_access",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			}
		},
		{
			"name": "v1",
			"item": [
				{
					"name": "OdsInstances",
					"item": [
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstances: Status code is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"GET OdsInstances: Response matches success format\", function () {",
											"    pm.expect(response[0]).to.have.property(\"odsInstanceId\");",
											"    pm.expect(response[0]).to.have.property(\"name\");",
											"    pm.expect(response[0]).to.have.property(\"instanceType\");",
											"});",
											"",
											"const GetOdsInstancesSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"odsInstanceId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"instanceType\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"odsInstanceId\",",
											"        \"name\",",
											"        \"instanceType\"",
											"      ]",
											"    }",
											"  ]",
											"}",
											"",
											"pm.test(\"GET OdsInstances: Validation Schema Response\", () => {",
											"    pm.response.to.have.jsonSchema(GetOdsInstancesSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/odsinstances?offset={{offset}}&limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"odsinstances"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstances NotFound: Status code is Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"GET OdsInstances NotFound: Response matches error format\", function () {",
											"    const response = pm.response.json();",
											"",
											"    pm.expect(response).to.have.property(\"title\");",
											"});",
											"",
											"pm.test(\"GET OdsInstances NotFound: Response title is helpful and accurate\", function () {",
											"    const response = pm.response.json();",
											"",
											"    pm.expect(response.title).to.contain(\"Not found\");",
											"    pm.expect(response.title).to.contain(\"odsinstance\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/odsinstances/0",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"odsinstances",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstancesID: Status code is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"GET OdsInstancesID: Response matches success format\", function () {",
											"    pm.expect(response).to.have.property(\"odsInstanceId\");",
											"    pm.expect(response).to.have.property(\"name\");",
											"    pm.expect(response).to.have.property(\"instanceType\");",
											"});",
											"",
											"const GetOdsInstancesIdSchema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"odsInstanceId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"instanceType\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"odsInstanceId\",",
											"    \"name\",",
											"    \"instanceType\"",
											"  ]",
											"}",
											"",
											"pm.test(\"GET OdsInstancesID: Validation Schema Response\", () => {",
											"    pm.response.to.have.jsonSchema(GetOdsInstancesIdSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"  url: `${pm.variables.get(\"API_URL\")}/v1/odsinstances?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,",
											"  method: 'GET',",
											"  header: {",
											"      \"Content-Type\": \"application/json\",",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`",
											"  }",
											"},  ",
											"function (err, response) {",
											"  if(err) { console.log(\"Error in Pre-request:\", err); }",
											"  const json = response.json();",
											"  if(!json[0].odsInstanceId) { console.log('Error in Pre-request: odsInstancesID missing from response. Response is:', json); }",
											"  else {",
											"    pm.collectionVariables.set(\"ODSInstanceId\", json[0].odsInstanceId);",
											"  }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/odsinstances/{{ODSInstanceId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"odsinstances",
										"{{ODSInstanceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances by ID Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstancesIDApplication: Status code is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"GET OdsInstancesIDApplication: Response matches success format\", function () {",
											"    pm.expect(response[0]).to.have.property(\"id\");",
											"    pm.expect(response[0]).to.have.property(\"applicationName\");",
											"    pm.expect(response[0]).to.have.property(\"claimSetName\");",
											"    pm.expect(response[0]).to.have.property(\"educationOrganizationIds\");",
											"    pm.expect(response[0]).to.have.property(\"vendorId\");",
											"    pm.expect(response[0]).to.have.property(\"profileIds\");",
											"    pm.expect(response[0]).to.have.property(\"odsInstanceId\");",
											"});",
											"",
											"const GetOdsInstancesIdApplication = {",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"applicationName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"claimSetName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"educationOrganizationIds\": {",
											"          \"type\": \"array\",",
											"          \"items\": {}",
											"        },",
											"        \"odsInstanceName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"vendorId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"profileIds\": {",
											"          \"type\": \"array\",",
											"          \"items\": {}",
											"        },",
											"        \"odsInstanceId\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"applicationName\",",
											"        \"claimSetName\",",
											"        \"educationOrganizationIds\",",
											"        \"vendorId\",",
											"        \"profileIds\",",
											"        \"odsInstanceId\"",
											"      ]",
											"    }",
											"  ]",
											"}",
											"",
											"pm.test(\"GET OdsInstancesIdApplication: Validation Schema Response\", () => {",
											"    pm.response.to.have.jsonSchema(GetOdsInstancesIdApplication);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/odsinstances/{{ODSInstanceId}}/applications",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"odsinstances",
										"{{ODSInstanceId}}",
										"applications"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if(pm.request.auth && pm.request.auth.type === \"noauth\") {",
					"    return;",
					"}",
					"",
					"let currentToken = pm.collectionVariables.get(\"TOKEN\");",
					"if(currentToken) {",
					"    return;",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/x-www-form-urlencoded'",
					"    },",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: pm.variables.get(\"RegisteredClientId\")},",
					"            {key: 'client_secret', value: pm.variables.get(\"RegisteredClientSecret\")},",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		},
		{
			"key": "ODSInstanceId",
			"value": ""
		},
		{
			"key": "NotExistClaimSetId",
			"value": ""
		},
		{
			"key": "OtherApplicationVendorId",
			"value": ""
		},
		{
			"key": "OtherApplicationId",
			"value": ""
		},
		{
			"key": "ClaimSetGUID",
			"value": ""
		},
		{
			"key": "CreatedClaimSetId",
			"value": ""
		},
		{
			"key": "OtherClaimSetGUID",
			"value": ""
		},
		{
			"key": "OtherExistingClaimSetId",
			"value": ""
		},
		{
			"key": "RegisteredClientId",
			"value": ""
		},
		{
			"key": "RegisteredClientSecret",
			"value": ""
		},
		{
			"key": "ApplicationVendorId",
			"value": ""
		},
		{
			"key": "CreatedApplicationId",
			"value": ""
		}
	]
}