{
	"info": {
		"_postman_id": "d1e11b5e-30eb-46a6-9be1-9b32fb6982c6",
		"name": "Admin API E2E",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20720204"
	},
	"item": [
		{
			"name": "User Management",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ClientId",
									"value": "{{ClientId}}",
									"type": "text"
								},
								{
									"key": "ClientSecret",
									"value": "{{ClientSecret}}",
									"type": "text"
								},
								{
									"key": "DisplayName",
									"value": "{{UserName}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/register",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"register"
							]
						}
					},
					"response": [
						{
							"name": "Client already exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "ClientId",
											"value": "{{ClientId}}",
											"type": "text"
										},
										{
											"key": "ClientSecret",
											"value": "{{ClientSecret}}",
											"type": "text"
										},
										{
											"key": "DisplayName",
											"value": "{{UserName}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/connect/register",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"connect",
										"register"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Jun 2022 00:32:33 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "FluentValidation.ValidationException: Validation failed: \r\n -- ClientId: ClientId test-client already exists Severity: Error\r\n   at EdFi.Ods.Admin.Api.Features.Connect.RegisterService.Handle(Request request) in C:\\Users\\anunez\\Documents\\Ed-Fi\\Repos\\Ed-Fi-ODS-AdminApp\\Application\\EdFi.Ods.Admin.Api\\Features\\Connect\\RegisterService.cs:line 39\r\n   at lambda_method15(Closure , Object )\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|25_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n\r\nHEADERS\r\n=======\r\nAccept: */*\r\nConnection: keep-alive\r\nHost: localhost:7214\r\nUser-Agent: PostmanRuntime/7.29.0\r\nAccept-Encoding: gzip, deflate, br\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 68\r\nPostman-Token: abff4861-de39-4ba9-b979-1e513b04d2a3\r\n"
						},
						{
							"name": "Register successful",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "ClientId",
											"value": "{{ClientId}}",
											"type": "text"
										},
										{
											"key": "ClientSecret",
											"value": "{{ClientSecret}}",
											"type": "text"
										},
										{
											"key": "DisplayName",
											"value": "{{UserName}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/connect/register",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"connect",
										"register"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Jun 2022 00:32:57 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"value\": {\n        \"status\": 200,\n        \"title\": \"Registered client test-client successfully.\"\n    },\n    \"statusCode\": 200,\n    \"contentType\": null\n}"
						},
						{
							"name": "Missing required property",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "ClientId",
											"value": "{{ClientId}}",
											"type": "text"
										},
										{
											"key": "ClientSecret",
											"value": "{{ClientSecret}}",
											"type": "text"
										},
										{
											"key": "DisplayName",
											"value": "{{UserName}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{API_URL}}/connect/register",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"connect",
										"register"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Tue, 07 Jun 2022 00:33:30 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "FluentValidation.ValidationException: Validation failed: \r\n -- DisplayName: 'Display Name' must not be empty. Severity: Error\r\n   at ValidatorExtensions.GuardAsync[TRequest](IValidator`1 validator, TRequest request) in C:\\Users\\anunez\\Documents\\Ed-Fi\\Repos\\Ed-Fi-ODS-AdminApp\\Application\\EdFi.Ods.Admin.Api\\Infrastructure\\ValidatorExtensions.cs:line 15\r\n   at EdFi.Ods.Admin.Api.Features.Connect.RegisterService.Handle(Request request) in C:\\Users\\anunez\\Documents\\Ed-Fi\\Repos\\Ed-Fi-ODS-AdminApp\\Application\\EdFi.Ods.Admin.Api\\Features\\Connect\\RegisterService.cs:line 35\r\n   at lambda_method15(Closure , Object )\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|25_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n\r\nHEADERS\r\n=======\r\nAccept: */*\r\nConnection: keep-alive\r\nHost: localhost:7214\r\nUser-Agent: PostmanRuntime/7.29.0\r\nAccept-Encoding: gzip, deflate, br\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 46\r\nPostman-Token: dcf3237d-fed7-44e6-b5be-b7cbcf7dd46d\r\n"
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Vendors",
			"item": [
				{
					"name": "Vendors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const result = pm.response.json().result;\r",
									"\r",
									"pm.test(\"Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(201);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"result\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"vendor\");\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes location in header\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"    pm.response.to.be.header(\"Location\", `/vendors/${result.vendorId}`);\r",
									"});\r",
									"\r",
									"pm.test(\"Response result includes vendor info\", function () {\r",
									"    pm.expect(result.company).to.equal(\"Test Company\");\r",
									"    pm.expect(result.namespacePrefixes).to.equal(\"uri://ed-fi.org\");\r",
									"    pm.expect(result.contactName).to.equal(\"Test User\");\r",
									"    pm.expect(result.contactEmailAddress).to.equal(\"test@test-ed-fi.org\");\r",
									"});\r",
									"\r",
									"if(result.vendorId) {\r",
									"    pm.collectionVariables.set(\"CreatedVendorId\", result.vendorId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"company\": \"Test Company\",\r\n    \"namespacePrefixes\": \"uri://ed-fi.org\",\r\n    \"contactName\": \"Test User\",\r\n    \"contactEmailAddress\": \"test@test-ed-fi.org\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/vendors",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"vendors"
							]
						}
					},
					"response": [
						{
							"name": "Vendor with multiple namespaces",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": {{CompanyName}},\r\n    \"namespacePrefixes\": \"uri://ed-fi.org,uri://academicbenchmarks.com\",\r\n    \"contactName\": {{ContactName}},\r\n    \"contactEmailAddress\": {{ContactEmail}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/vendors",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Thu, 02 Jun 2022 23:13:53 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Location",
									"value": "/Vendors/2"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"result\": {\n        \"vendorId\": 2,\n        \"company\": \"Test Company\",\n        \"namespacePrefixes\": \"uri://ed-fi.org,uri://academicbenchmarks.com\",\n        \"contactName\": \"Test User\",\n        \"contactEmailAddress\": \"test@test-ed-fi.org\"\n    },\n    \"status\": 201,\n    \"title\": \"Vendor created successfully\"\n}"
						}
					]
				},
				{
					"name": "Vendors - Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    pm.expect(response.status).to.equal(400);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors[\"Company\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"ContactName\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"ContactEmailAddress\"].length).to.equal(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"company\": \"\",\r\n    \"namespacePrefixes\": \"\",\r\n    \"contactName\": \"\",\r\n    \"contactEmailAddress\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/vendors",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"vendors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const results = pm.response.json().result;\r",
									"\r",
									"pm.test(\"Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"result\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response result includes vendors\", function () {\r",
									"    pm.expect(results.length).to.be.greaterThan(0);\r",
									"\r",
									"    const indexOfVendor = results.map(\r",
									"        function(vendor) { return vendor.vendorId; }\r",
									"    ).indexOf(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
									"\r",
									"    const result = results[indexOfVendor];\r",
									"    pm.expect(result.company).to.equal(\"Test Company\");\r",
									"    pm.expect(result.namespacePrefixes).to.equal(\"uri://ed-fi.org\");\r",
									"    pm.expect(result.contactName).to.equal(\"Test User\");\r",
									"    pm.expect(result.contactEmailAddress).to.equal(\"test@test-ed-fi.org\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/vendors",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"vendors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendors by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const result = pm.response.json().result;\r",
									"\r",
									"pm.test(\"Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"result\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response result matches vendor\", function () {\r",
									"    const vendorId = pm.collectionVariables.get(\"CreatedVendorId\");\r",
									"    \r",
									"    pm.expect(result.vendorId).to.equal(vendorId);\r",
									"    pm.expect(result.company).to.equal(\"Test Company\");\r",
									"    pm.expect(result.namespacePrefixes).to.equal(\"uri://ed-fi.org\");\r",
									"    pm.expect(result.contactName).to.equal(\"Test User\");\r",
									"    pm.expect(result.contactEmailAddress).to.equal(\"test@test-ed-fi.org\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/vendors/{{CreatedVendorId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"vendors",
								"{{CreatedVendorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const result = pm.response.json().result;\r",
									"\r",
									"pm.test(\"Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"result\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"vendor\");\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"updated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response result includes updated vendor\", function () {\r",
									"    pm.expect(result.company).to.equal(\"Updated Test Company\");\r",
									"    pm.expect(result.namespacePrefixes).to.equal(\"uri://academicbenchmarks.com\");\r",
									"    pm.expect(result.contactName).to.equal(\"Updated User\");\r",
									"    pm.expect(result.contactEmailAddress).to.equal(\"updated@example.com\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"company\": \"Updated Test Company\",\r\n    \"namespacePrefixes\": \"uri://academicbenchmarks.com\",\r\n    \"contactName\": \"Updated User\",\r\n    \"contactEmailAddress\": \"updated@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/vendors/{{CreatedVendorId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"vendors",
								"{{CreatedVendorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendors - Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    pm.expect(response.status).to.equal(400);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors[\"Company\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"ContactName\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"ContactEmailAddress\"].length).to.equal(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"company\": \"\",\r\n    \"contactName\": \"\",\r\n    \"contactEmailAddress\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/vendors/{{CreatedVendorId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"vendors",
								"{{CreatedVendorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"vendor\");\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/vendors/{{CreatedVendorId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"vendors",
								"{{CreatedVendorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendors -  Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.status).to.equal(404);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"    pm.expect(response.errors).to.contain(response.title);\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.title).to.contain(\"Not found\");\r",
									"    pm.expect(response.title).to.contain(\"vendor\");\r",
									"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/vendors/{{CreatedVendorId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"vendors",
								"{{CreatedVendorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendors - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.status).to.equal(404);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"    pm.expect(response.errors).to.contain(response.title);\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.title).to.contain(\"Not found\");\r",
									"    pm.expect(response.title).to.contain(\"vendor\");\r",
									"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"company\": \"Updated Test Company\",\r\n    \"namespacePrefixes\": \"uri://academicbenchmarks.com\",\r\n    \"contactName\": \"Updated User\",\r\n    \"contactEmailAddress\": \"updated@example.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/vendors/{{CreatedVendorId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"vendors",
								"{{CreatedVendorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendors - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.status).to.equal(404);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"    pm.expect(response.errors).to.contain(response.title);\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.title).to.contain(\"Not found\");\r",
									"    pm.expect(response.title).to.contain(\"vendor\");\r",
									"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"CreatedVendorId\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/vendors/{{CreatedVendorId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"vendors",
								"{{CreatedVendorId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Application",
			"item": [
				{
					"name": "Applications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"  url: `${pm.variables.get(\"API_URL\")}/vendors`,\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"      \"Content-Type\": \"application/json\",\r",
									"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw:JSON.stringify({\r",
									"      \"company\": \"Application Company\",\r",
									"      \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
									"      \"contactName\": \"Application User\",\r",
									"      \"contactEmailAddress\": \"application@example.com\"\r",
									"    }), \r",
									"  }\r",
									"},  \r",
									"function (err, response) {\r",
									"  if(err) { console.log(\"Error in Pre-request:\", err); }\r",
									"  const json = response.json();\r",
									"  if(!json.result.vendorId) { console.log('Error in Pre-request: vendorID missing from response. Response is:', json); }\r",
									"  else {\r",
									"    pm.collectionVariables.set(\"ApplicationVendorId\", json.result.vendorId);\r",
									"  }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const result = pm.response.json().result;\r",
									"\r",
									"pm.test(\"Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(201);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"result\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"application\");\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes location in header\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"    pm.response.to.be.header(\"Location\", `/applications/${result.applicationId}`);\r",
									"});\r",
									"\r",
									"pm.test(\"Response result includes application key and secret\", function () {\r",
									"    pm.expect(result).to.have.property(\"applicationId\");\r",
									"    pm.expect(result).to.have.property(\"key\");\r",
									"    pm.expect(result).to.have.property(\"secret\");\r",
									"});\r",
									"\r",
									"if(result.applicationId) {\r",
									"    pm.collectionVariables.set(\"CreatedApplicationId\", result.applicationId);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": [ 255901 ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/applications/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications - Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    pm.expect(response.status).to.equal(400);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors[\"ApplicationName\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"ClaimSetName\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"EducationOrganizationIds\"].length).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicationName\": \"\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": []\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/applications/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications - Invalid Vendor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    pm.expect(response.status).to.equal(400);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors.VendorId.length).to.equal(1);\r",
									"    pm.expect(response.errors.VendorId[0]).to.contain(\"not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": 9999,\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": [ 255901 ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/applications/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications - Invalid Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const errors = pm.response.json().errors;\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    pm.expect(response.status).to.equal(400);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors.ProfileId.length).to.equal(1);\r",
									"    pm.expect(response.errors.ProfileId[0]).to.contain(\"not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileId\": 9999,\r\n  \"educationOrganizationIds\": [ 255901 ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/applications/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const results = pm.response.json().result;\r",
									"\r",
									"pm.test(\"Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"result\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response result includes applications\", function () {\r",
									"    pm.expect(results.length).to.be.greaterThan(0);\r",
									"\r",
									"    const indexOfApplication = results.map(\r",
									"        function(application) { return application.applicationId; }\r",
									"    ).indexOf(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
									"\r",
									"    const result = results[indexOfApplication];\r",
									"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
									"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
									"    pm.expect(result.educationOrganizationId).to.equal(255901);\r",
									"    pm.expect(result.profileName).to.equal(null);\r",
									"    pm.expect(result.odsInstanceName).to.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Response results do not include key or secret\", function () {\r",
									"    results.forEach(function(result, i) {\r",
									"        pm.expect(result).to.not.have.property(\"key\");\r",
									"        pm.expect(result).to.not.have.property(\"secret\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/applications/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const result = pm.response.json().result;\r",
									"\r",
									"pm.test(\"Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"result\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response result matches application\", function () {\r",
									"    const applicationId = pm.collectionVariables.get(\"CreatedApplicationId\");\r",
									"    \r",
									"    pm.expect(result.applicationId).to.equal(applicationId);\r",
									"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
									"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
									"    pm.expect(result.educationOrganizationId).to.equal(255901);\r",
									"    pm.expect(result.profileName).to.equal(null);\r",
									"    pm.expect(result.odsInstanceName).to.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Response result does not include key or secret\", function () {  \r",
									"    pm.expect(result).to.not.have.property(\"key\");\r",
									"    pm.expect(result).to.not.have.property(\"secret\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/applications/{{CreatedApplicationId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								"{{CreatedApplicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications by Vendor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const results = pm.response.json().result;\r",
									"\r",
									"pm.test(\"Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"result\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response result includes applications\", function () {\r",
									"    pm.expect(results.length).to.be.greaterThan(0);\r",
									"\r",
									"    const indexOfApplication = results.map(\r",
									"        function(application) { return application.applicationId; }\r",
									"    ).indexOf(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
									"\r",
									"    const result = results[indexOfApplication];\r",
									"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
									"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
									"    pm.expect(result.educationOrganizationId).to.equal(255901);\r",
									"    pm.expect(result.profileName).to.equal(null);\r",
									"    pm.expect(result.odsInstanceName).to.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Response result is filtered by vendor\", function () {\r",
									"    const resultApplicationIds = results.map(\r",
									"        function(application) { return application.applicationId; }\r",
									"    );\r",
									"\r",
									"    pm.expect(resultApplicationIds).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
									"    pm.expect(resultApplicationIds).to.not.contain(pm.collectionVariables.get(\"OtherApplicationId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response results do not include key or secret\", function () {\r",
									"    results.forEach(function(result, i) {\r",
									"        pm.expect(result).to.not.have.property(\"key\");\r",
									"        pm.expect(result).to.not.have.property(\"secret\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"  url: `${pm.variables.get(\"API_URL\")}/vendors`,\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"      \"Content-Type\": \"application/json\",\r",
									"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw:JSON.stringify({\r",
									"      \"company\": \"Other Company\",\r",
									"      \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
									"      \"contactName\": \"Other Application User\",\r",
									"      \"contactEmailAddress\": \"otherapplication@example.com\"\r",
									"    }), \r",
									"  }\r",
									"},\r",
									"function (vendorErr, vendorResponse) {\r",
									"  if(vendorErr) { console.log(\"Error in Pre-request:\", vendorErr); }\r",
									"  const vendorJson = vendorResponse.json();\r",
									"  if(!vendorJson.result.vendorId) { console.log('Error in Pre-request: vendorID missing from response. Response is:', vendorJson); }\r",
									"  pm.collectionVariables.set(\"OtherApplicationVendorId\", vendorJson.result.vendorId);\r",
									"\r",
									"  pm.sendRequest({\r",
									"    url: `${pm.variables.get(\"API_URL\")}/applications`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\",\r",
									"        \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
									"    },\r",
									"    body: {\r",
									"      mode: 'raw',\r",
									"      raw:JSON.stringify({\r",
									"        \"applicationName\": \"Other Vendor Application\",\r",
									"        \"vendorId\": pm.collectionVariables.get(\"OtherApplicationVendorId\"),\r",
									"        \"claimSetName\": \"Ed-Fi Sandbox\",\r",
									"        \"profileId\": null,\r",
									"        \"educationOrganizationIds\": [ 255901 ]\r",
									"      }),\r",
									"    }\r",
									"  },  \r",
									"  function (appErr, appResonse) {\r",
									"    if(appErr) { console.log(\"Error in Pre-request:\", appErr); }\r",
									"    const appJson = appResonse.json();\r",
									"    if(!appJson.result.applicationId) { console.log('Error in Pre-request: applicationId missing from response. Response is:', appJson); }\r",
									"    else {\r",
									"      pm.collectionVariables.set(\"OtherApplicationId\", appJson.result.applicationId);\r",
									"    }\r",
									"  });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/vendors/{{ApplicationVendorId}}/applications",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"vendors",
								"{{ApplicationVendorId}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const result = pm.response.json().result;\r",
									"\r",
									"pm.test(\"Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"result\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"application\");\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"updated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response result includes updated application\", function () {\r",
									"    pm.expect(result.applicationName).to.equal(\"Updated Application Name\");\r",
									"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi ODS Admin App\");\r",
									"    pm.expect(result.educationOrganizationId).to.equal(1234);\r",
									"    pm.expect(result.profileName).to.equal(null);\r",
									"    pm.expect(result.odsInstanceName).to.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Response result does not include application key and secret\", function () {\r",
									"    pm.expect(result).to.not.have.property(\"key\");\r",
									"    pm.expect(result).to.not.have.property(\"secret\");\r",
									"});\r",
									"\r",
									"pm.test(\"Request updated Application/Vendor relationship\", function () {\r",
									"    pm.sendRequest({\r",
									"      url: `${pm.variables.get(\"API_URL\")}/vendors/${pm.collectionVariables.get(\"ApplicationVendorId\")}/applications`,\r",
									"      method: 'GET',\r",
									"      header: {\r",
									"          \"Content-Type\": \"application/json\",\r",
									"          \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
									"      },\r",
									"      body: {\r",
									"        mode: 'raw',\r",
									"        raw:JSON.stringify({\r",
									"          \"company\": \"Application Company\",\r",
									"          \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
									"          \"contactName\": \"Application User\",\r",
									"          \"contactEmailAddress\": \"application@example.com\"\r",
									"        }), \r",
									"      }\r",
									"  },  \r",
									"  function (err, response) {\r",
									"    if(err) { console.log(\"Error in test request:\", err); }\r",
									"    if(response.code != 200) { console.log('Error in  test request. Response is:', response); }\r",
									"    const results = response.json().result;\r",
									"    pm.expect(results.length).to.equal(0);\r",
									"  });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Updated Application Name\",\r\n  \"vendorId\": {{OtherApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi ODS Admin App\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": [1234]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/applications/{{CreatedApplicationId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								"{{CreatedApplicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications - Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    pm.expect(response.status).to.equal(400);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors[\"ApplicationName\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"ClaimSetName\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"EducationOrganizationIds\"].length).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"\",\r\n  \"vendorId\": {{OtherApplicationVendorId}},\r\n  \"claimSetName\": \"\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": []\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/applications/{{CreatedApplicationId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								"{{CreatedApplicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications - Invalid Vendor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    pm.expect(response.status).to.equal(400);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors.VendorId.length).to.equal(1);\r",
									"    pm.expect(response.errors.VendorId[0]).to.contain(\"not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Updated Application Name\",\r\n  \"vendorId\": 9999,\r\n  \"claimSetName\": \"Ed-Fi ODS Admin App\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": [1234]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/applications/{{CreatedApplicationId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								"{{CreatedApplicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications - Invalid Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const errors = pm.response.json().errors;\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    pm.expect(response.status).to.equal(400);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors.ProfileId.length).to.equal(1);\r",
									"    pm.expect(response.errors.ProfileId[0]).to.contain(\"not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Updated Application Name\",\r\n  \"vendorId\": {{OtherApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi ODS Admin App\",\r\n  \"profileId\": 9999,\r\n  \"educationOrganizationIds\": [1234]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/applications/{{CreatedApplicationId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								"{{CreatedApplicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const result = pm.response.json().result;\r",
									"\r",
									"pm.test(\"Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"result\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"application\");\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"updated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response result includes application key and secret\", function () {\r",
									"    pm.expect(result).to.have.property(\"applicationId\");\r",
									"    pm.expect(result).to.have.property(\"key\");\r",
									"    pm.expect(result).to.have.property(\"secret\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/applications/{{CreatedApplicationId}}/reset-credential",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								"{{CreatedApplicationId}}",
								"reset-credential"
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"application\");\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"OtherApplicationVendorId\");\r",
									"pm.collectionVariables.unset(\"OtherApplicationId\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/applications/{{CreatedApplicationId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								"{{CreatedApplicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.status).to.equal(404);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"    pm.expect(response.errors).to.contain(response.title);\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.title).to.contain(\"Not found\");\r",
									"    pm.expect(response.title).to.contain(\"application\");\r",
									"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/applications/{{CreatedApplicationId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								"{{CreatedApplicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Credential - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.status).to.equal(404);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"    pm.expect(response.errors).to.contain(response.title);\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.title).to.contain(\"Not found\");\r",
									"    pm.expect(response.title).to.contain(\"application\");\r",
									"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/applications/{{CreatedApplicationId}}/reset-credential",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								"{{CreatedApplicationId}}",
								"reset-credential"
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.status).to.equal(404);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"    pm.expect(response.errors).to.contain(response.title);\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.title).to.contain(\"Not found\");\r",
									"    pm.expect(response.title).to.contain(\"application\");\r",
									"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileId\": null,\r\n  \"educationOrganizationIds\": [ 255901 ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/applications/{{CreatedApplicationId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								"{{CreatedApplicationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Applications - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches error format\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.status).to.equal(404);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"    pm.expect(response.errors).to.contain(response.title);\r",
									"});\r",
									"\r",
									"pm.test(\"Response title is helpful and accurate\", function () {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.title).to.contain(\"Not found\");\r",
									"    pm.expect(response.title).to.contain(\"application\");\r",
									"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"ApplicationVendorId\");\r",
									"pm.collectionVariables.unset(\"CreatedApplicationId\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/applications/{{CreatedApplicationId}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"applications",
								"{{CreatedApplicationId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let currentToken = pm.collectionVariables.get(\"TOKEN\");",
					"if(currentToken) {",
					"    return;",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/x-www-form-urlencoded'",
					"    },",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: pm.variables.get(\"ClientId\")},",
					"            {key: 'client_secret', value: pm.variables.get(\"ClientSecret\")},",
					"            {key: 'grant_type', value: \"client_credentials\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": "",
			"disabled": true
		}
	]
}